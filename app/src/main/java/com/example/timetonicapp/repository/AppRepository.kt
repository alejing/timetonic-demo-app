package com.example.timetonicapp.repository

import android.content.Context
import com.example.timetonicapp.api.RetrofitInstance
import com.example.timetonicapp.model.AppKeyResponse
import com.example.timetonicapp.model.BookItem
import com.example.timetonicapp.model.BookResponse
import com.example.timetonicapp.model.OauthKeyResponse
import com.example.timetonicapp.model.SessKeyResponse
import com.example.timetonicapp.utils.isNetworkAvailable
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

/**
 * Repository for accessing and managing remote app data.
 */
class AppRepository(private val context: Context) {

    /**
     * Retrieves the appKey generated by the server.
     * Params: version - The version of the API.
     *         req - The request type.
     *         name - The name of the app.
     * Returns: The appKey string or an exception or errorMsg.
     */
    fun createAppKey(
        version: String,
        req: String,
        appname: String,
        onSuccess: (String) -> Unit, onFailure: (Throwable) -> Unit) {

        // Check if there is an internet connection
        if (!isNetworkAvailable(context)) {
            onFailure(Exception("No internet connection"))
            return
        }

        // Create the appKey with the help of RetrofitInstance
        RetrofitInstance.api.createAppkey(version, req, appname).enqueue(object :
            Callback<AppKeyResponse> {
            override fun onResponse(call: Call<AppKeyResponse>, response: Response<AppKeyResponse>) {
                if (response.isSuccessful) {
                    val appKey = response.body()?.appkey
                    val errorMsg = response.body()?.errorMsg
                    if (appKey != null) {
                        onSuccess(appKey)
                    } else if (errorMsg != null) {
                        onFailure(Exception(errorMsg))
                    } else {
                        onFailure(Exception("Could not create AppKey"))
                    }
                } else {
                    onFailure(Exception("Failed to create AppKey"))
                }
            }

            override fun onFailure(call: Call<AppKeyResponse>, t: Throwable) {
                onFailure(t)
            }
        })
    }

    /**
     * Retrieves the oauthKey and the o_u generated by the server.
     * Params: version - The version of the API.
     *         req - The request type.
     *         name - The name of the app.
     *         login - The login of the user.
     *         pwd - The password of the user.
     *         appKey - The appKey generated by the server.
     * Returns: The oauthKey string and the o_u string or an exception.
     */
    fun createOauthKey(
        version: String,
        req: String,
        login: String,
        pwd: String,
        appKey: String,
        onSuccess: (String, String) -> Unit, onFailure: (Throwable) -> Unit) {

        // Check if there is an internet connection
        if (!isNetworkAvailable(context)) {
            onFailure(Exception("No internet connection"))
            return
        }

        // Create the oauthKey and o_u with the help of RetrofitInstance
        RetrofitInstance.api.createOauthkey(version, req, login, pwd, appKey).enqueue(object : Callback<OauthKeyResponse> {
            override fun onResponse(call: Call<OauthKeyResponse>, response: Response<OauthKeyResponse>) {
                if (response.isSuccessful) {
                    val oauthKey = response.body()?.oauthkey
                    val ou = response.body()?.o_u
                    if (oauthKey != null && ou != null) {
                        onSuccess(oauthKey, ou)
                    } else {
                        onFailure(Exception("invalid login/pwd"))
                    }
                } else {
                    onFailure(Exception("Failed to create OauthKey"))
                }
            }

            override fun onFailure(call: Call<OauthKeyResponse>, t: Throwable) {
                onFailure(t)
            }
        })
    }

    /**
     * Retrieves the sessKey by the server.
     * Params: version - The version of the API.
     *         req - The request type.
     *         ou - The o_u generated by the server.
     *         uc - The user's login for this case the same as ou.
     *         oauthKey - The oauthKey generated by the server.
     * Returns: The sessKey string or an exception.
     */
    fun createSessKey(
        version: String,
        req: String,
        ou: String,
        uc: String,
        oauthKey: String,
        onSuccess: (String) -> Unit, onFailure: (Throwable) -> Unit) {

        // Check if there is an internet connection
        if (!isNetworkAvailable(context)) {
            onFailure(Exception("No internet connection"))
            return
        }

        // Create the SessKey with the help of RetrofitInstance
        RetrofitInstance.api.createSesskey(version, req, ou, uc, oauthKey).enqueue(object : Callback<SessKeyResponse> {
            override fun onResponse(call: Call<SessKeyResponse>, response: Response<SessKeyResponse>) {
                if (response.isSuccessful) {
                    val sessKey = response.body()?.sesskey
                    if (sessKey != null) {
                        onSuccess(sessKey)
                    } else {
                        onFailure(Exception("SessKey is null"))
                    }
                } else {
                    onFailure(Exception("Failed to create SessKey"))
                }
            }

            override fun onFailure(call: Call<SessKeyResponse>, t: Throwable) {
                onFailure(t)
            }
        })
    }

    /**
     * Retrieves a list of books saved on the server.
     * Params: version - The version of the API.
     *         req - The request type.
     *         ou - The o_u generated by the server.
     *         sessKey - The sessKey generated by the server.
     * Returns: The list of books or an exception.
     */
    fun getAllBooks(
        version: String,
        req: String,
        ou: String,
        sessKey: String,
        onSuccess: (List<BookItem>) -> Unit, onFailure: (Throwable) -> Unit) {

        // Check if there is an internet connection
        if (!isNetworkAvailable(context)) {
            onFailure(Exception("No internet connection"))
            return
        }

        // Create the list of books with the help of RetrofitInstance
        RetrofitInstance.api.getAllBooks(version, req, ou, ou, sessKey).enqueue(object : Callback<BookResponse> {
            override fun onResponse(call: Call<BookResponse>, response: Response<BookResponse>) {
                if (response.isSuccessful) {
                    val books = response.body()?.allBooks?.books?.map { book ->
                        val name = book.ownerPrefs.title ?: "No name available."
                        val description = book.description ?: "No description available."
                        val urlImage = if (book.ownerPrefs.oCoverImg.isNullOrEmpty()) {
                            "null"
                        } else {
                            book.ownerPrefs.oCoverImg
                        }
                        BookItem(name, urlImage, description)
                    }?: emptyList()
                    onSuccess(books)
                } else {
                    onFailure(Exception("Failed to create the list of books"))
                }
            }

            override fun onFailure(call: Call<BookResponse>, t: Throwable) {
                onFailure(t)
            }
        })
    }
}